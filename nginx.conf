# 运行用户，默认即是nginx，可以不进行设置
user nginx;
# nginx进程数，建议设置为等于CPU总核心数。
worker_processes 1;

events {
  # 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)
  use epoll;
  # 每个进程允许最大并发数
  worker_connections 1024;
}

http {
  # 开启高效传输模式
  sendfile on;
  # 减少网络报文段的数量
  tcp_nopush on;
  tcp_nodelay on;
  # 保持连接的时间，也叫超时时间，单位秒
  keepalive_timeout 30;
  types_hash_max_size 2048;
  client_max_body_size 50M; # 允许最大 50MB 的请求体

  # 文件扩展名与类型映射表
  include /etc/nginx/mime.types;
  # 加载其它的子配置文件
  include /etc/nginx/conf.d/*.conf;
  # 默认文件类型
  default_type application/octet-stream;

  # 默认off，是否开启 gzip 压缩
  gzip on;
  # 设置启用 gzip 的类型
  gzip_types text/plain text/css application/json application/x-javascript text/javascript;
  # gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6
  gzip_comp_level 4;

  # 服务器地址，这里可以配置多个服务器地址，实现负载均衡
  upstream ecommerce {
    server server:5000;
  }

  server {
    # 监听启动80端口
    listen 80;
    # 服务器地址，也可以填域名或ip地址
    server_name 123.207.84.158;

    #location / {
    #  如果你有前端项目的话，这里也可以找你打包后前端项目
    #  root 前端打包后文件的地址;
    #  index index.html index.htm;
    #  try_files $uri $uri/ /index.html;
    #}

    # 将所有匹配到的请求代理到 5000 端口的 node 服务
    location / {
      # 代理本机启动的 node 服务器，服务器启动在 5000 端口
      proxy_pass http://server:5000;

      # 获取用户真实 ip，否则 Node 服务中拿不到用户的 ip 地址
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Real-Port $remote_port;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }
}